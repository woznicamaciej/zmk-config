/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q              &kp W                &kp E            &kp R                &kp T        &kp Y    &kp U                 &kp I             &kp O                 &kp P                  &kp BSPC
&kp LCTRL  &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D  &hml LEFT_COMMAND F  &kp G        &kp H    &hmr RIGHT_COMMAND J  &hmr RIGHT_ALT K  &hmr RIGHT_CONTROL L  &hmr RIGHT_SHIFT SEMI  &kp SQT
&kp LSHFT  &kp Z              &kp X                &kp C            &kp V                &kp B        &kp N    &kp M                 &kp COMMA         &kp DOT               &kp FSLH               &kp ESC
                                                   &kp LGUI         &mo 1                &kp SPACE    &kp RET  &mo 2                 &kp RALT
            >;
        };

        lower {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp K_MUTE       &kp SINGLE_QUOTE   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp C_PLAY_PAUSE    &kp LESS_THAN     &kp N7  &kp N8    &kp N9  &kp EQUAL  &kp BSPC
&kp LCTRL  &kp C_VOLUME_UP  &kp DOUBLE_QUOTES  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp C_NEXT          &kp GREATER_THAN  &kp N4  &kp N5    &kp N6  &kp COMMA  &trans
&kp LSHFT  &kp C_VOL_DN     &kp GRAVE          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp C_PREV          &trans            &kp N1  &kp N2    &kp N3  &kp N0     &kp ESC
                                               &kp LGUI              &trans                 &kp SPACE           &kp RET           &mo 3   &kp RALT
            >;
        };

        raise {
            bindings = <
&kp TAB    &trans  &trans    &kp UP_ARROW   &trans            &kp C_BRIGHTNESS_INC    &trans   &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp PLUS               &kp BSPC
&kp LCTRL  &trans  &kp LEFT  &kp DOWN       &kp RIGHT         &kp C_BRIGHTNESS_DEC    &trans   &kp DOLLAR       &kp PERCENT   &kp CARET             &trans                 &trans
&kp LSHFT  &trans  &trans    &kp LESS_THAN  &kp GREATER_THAN  &trans                  &trans   &kp EXCLAMATION  &kp AT_SIGN   &kp POUND             &kp RIGHT_PARENTHESIS  &kp ESC
                             &kp LGUI       &mo 3             &kp SPACE               &kp RET  &trans           &kp LALT
            >;
        };

        system {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans   &trans   &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans   &trans   &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 3>;
            then-layer = <3>;
        };
    };
};
